{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "861bc300-dfec-40b6-8d58-7e08b1236a55",
   "metadata": {},
   "outputs": [],
   "source": [
    "import subprocess\n",
    "import wolframalpha\n",
    "import pyttsx3\n",
    "import tkinter\n",
    "import json\n",
    "import random\n",
    "import speech_recognition as sr\n",
    "import datetime\n",
    "import wikipedia\n",
    "import webbrowser\n",
    "import os\n",
    "import winshell\n",
    "import pyjokes\n",
    "import feedparser\n",
    "import smtplib\n",
    "import ctypes\n",
    "import time\n",
    "import requests\n",
    "import shutil\n",
    "from twilio.rest import Client\n",
    "from clint.textui import progress\n",
    "from bs4 import BeautifulSoup# bs4-> BeautifulSoup4\n",
    "import win32com.client as wincl\n",
    "from urllib.request import urlopen\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3869ab49-dd5b-4e44-8a30-20c2db950d6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# (init)->initilize  the pyttsx3 engine.It prepares the engine for text-to-speech conversion.\n",
    "engine=pyttsx3.init('sapi5')#(sapi5)--> API developed by Microsoft4\n",
    "# this line of code sets up pyttsx3 to use the SAPI 5 engine for text-to-speech conversion, enabling your Python program to generate spoken output on Windows platforms.\n",
    "voices=engine.getProperty('voices')#(voices)--> property that is being retrieved from the speech Engine\n",
    "#After executing this code, you can access individual voices from the list stored in the voice variable. Each voice object typically contains properties such as the voice's name, language, gender, and other attributes that can be used to customize the text-to-speech output according to your preferences.voice=engine.getProperty('voices')\n",
    "engine.setProperty('voice',voices[1].id)#(voices[1).id)--> This part of the code accesses the second voice from the list of available voices (voices)\n",
    "#So, with this line of code, the text-to-speech engine is instructed to use the second available voice from the list of voices retrieved earlier (voices) for synthesizing speech."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3e803f0a-3c39-4dbd-aaba-efc617d5ed05",
   "metadata": {},
   "outputs": [],
   "source": [
    "def speak(audio):\n",
    "    engine.say(audio)\n",
    "    engine.runAndWait()\n",
    "\n",
    "def wishMe():\n",
    "    hour= int(datetime .datetime.now().hour)\n",
    "    if hour>=0 and hour<12:\n",
    "        speak('Good Morning !')\n",
    "\n",
    "    elif hour >=12 and hour<18:\n",
    "        speak('Good AfterNoon !')\n",
    "    else:\n",
    "        speak('Good Evening !')\n",
    "    \n",
    "    assname=(\"Jarvis 1 point o\")\n",
    "    speak(\"I am your Assistant\")\n",
    "    speak(assname)\n",
    "\n",
    "def username():\n",
    "    speak(\"What is your good name\")\n",
    "    uname=takeCommand()\n",
    "    speak(\"Welcome Sir\")\n",
    "    speak(uname)\n",
    "    columns=shutil.get_terminal_size().columns#Imagine your terminal window as a grid, where characters are arranged horizontally (columns) and vertically (rows). This line of code simply asks Python to tell you how many columns (horizontal spaces) are available in that grid. It's useful for designing your output to fit nicely within the width of the terminal window.\n",
    "\n",
    "    print(\"####################\".center(columns))\n",
    "    print(\"Welcome Mr.\",uname.center(columns))\n",
    "    print(\"####################\".center(columns))\n",
    "\n",
    "    speak(\"How can i help you, Sir\")\n",
    "\n",
    "def takeCommand():\n",
    "    r=sr.Recognizer()\n",
    "\n",
    "    with sr.Microphone() as source:\n",
    "        print(\"Listening...\")\n",
    "        r.pause_threshold = 1 #  means that the speech recognition system will stop listening and process the input if it detects a pause of 1 second or longer between spoken words or phrases \n",
    "        audio=r.listen(source)#aptures audio input from the specified source and stores it in the variable audio\n",
    "\n",
    "    try:\n",
    "        print(\"Recogninzing....\")\n",
    "        query=r.recognize_google(audio,language='en-in')#language='en-in': This parameter specifies the language of the speech that you expect to recognize. In this case, 'en-in' indicates English language with an Indian accent. this line of code captures audio input, recognizes the speech content using Google's speech recognition service, and stores the recognized text in the variable query\n",
    "        print(f\"User said: {query}\\n\")\n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "        print(\"Unable to Recognizing\")\n",
    "        return \"None\"\n",
    "    return query\n",
    "\n",
    "def sendEmail(to, content):# SMTP (Simple Mail Transfer Protocol) \n",
    "    server=  smtplib.SMTP('smtp.gmail.com',587)# specifically for connecting to Gmail's SMTP server. port number for the SMTP server.\n",
    "    server.ehlo()# It stands for \"Extended HELO\" and is a command sent by the client to the server to identify itself and initiate the SMTP conversatio\n",
    "    server.starttls()#is like putting a protective shield around the communication between your Python script and the email server.\n",
    "    # enable Low securityy in gmail\n",
    "    server.login('your email id','your email password')\n",
    "    server.sendEmail('you email id', to, content)\n",
    "    server.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f117e68-16b2-4f7c-9751-1b7461ae3110",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Listening...\n"
     ]
    }
   ],
   "source": [
    "if __name__=='__main__':\n",
    "    clear=lambda:os.system('cls')\n",
    "    clear()\n",
    "    wishMe()\n",
    "    username()\n",
    "    while True:\n",
    "        query=takeCommand().lower()\n",
    "        if 'wikipedia' in query:\n",
    "            speak('Searching  Wikipedia')\n",
    "            query= query.replace(\"Wikipedia\",\"\")\n",
    "            results=wikipedia.summary(query,sentences=3)#This line calls a function from the Wikipedia library to search for information related to the user's input (query). The sentences=3 argument specifies that only the first 3 sentences of the summary should be returned.\n",
    "            speak(\"According to wikipedia\")\n",
    "            print(results)\n",
    "            speak(results)\n",
    "        elif 'open youtube' in query:\n",
    "            speak(\"Here you go to Youtube\\n\")\n",
    "            webbrowser.open(\"youtube.com\")\n",
    "        elif 'open google' in query:\n",
    "            speak(\"Here you lgo to google Search\\n\")\n",
    "            webbrowser.open(\"googkle.com\")\n",
    "        elif 'open stackoverflow' in query:\n",
    "            speak(\"Herer you go to Stack over flow.Happy Coding\\n\")\n",
    "            webbrowser.open(\"stackoverflow.com\")\n",
    "        elif 'open gfg' in query:\n",
    "            speak(\"Here you go to geeksforgeek\")\n",
    "            webbrowser.open(\"geeksforgeek.com\")\n",
    "        elif 'play music' in query or 'play song' in query or 'listen to music':\n",
    "            speak(\"Playing the music \")\n",
    "            music_dir=\"C:\\\\Users\\\\anshk\\\\Music\"\n",
    "            songs=os.listdir(music_dir)\n",
    "            print(songs)\n",
    "            random=os.startfile(os.path.join(music_dir,songs[1]))#os.path.join() function to create a valid file path by joining the music_dir (which likely represents the directory containing music files) with the filename stored in songs[1]\n",
    "            #os.startfile(): This function opens a file with the default application associated with the file type. It's commonly used to open documents, images, or in this case, music files.\n",
    "        elif 'the time' in query:\n",
    "            strTime=datetime.datetime.now().strftime(\"% H:% M:% S\")#the name strftime stands for \"string format time\", indicating its purpose of converting a time object into a string.\n",
    "            speak(f\"Sir, the time is {strTime}\")\n",
    "        elif 'the date ' in query :\n",
    "            strDate=dateTime.date.today()\n",
    "            speak(f\"Sir, the date is {strDate}\")\n",
    "        elif 'the day' in query:\n",
    "            strDay=datetime.datetime.today.strftime(\"%A\")\n",
    "            speak(f\"Sir the day is :{strDay}\")\n",
    "        elif 'open chrome' in query:\n",
    "            codePath= r\"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Google Chrome.lnk\"\n",
    "            os.startfile(codePath)\n",
    "        elif 'email to Ansh' in query:\n",
    "            try:\n",
    "                speak(\"What should I say\")\n",
    "                content=takeCommand()\n",
    "                to =\"Receiver email address\"\n",
    "                senEmail(to ,content)\n",
    "                speak(\"Email has been sent !\")\n",
    "            except Exceptio  as e:\n",
    "                print(e)\n",
    "                speak(\"I am not able to sent the mail to the user please check the email !\")\n",
    "\n",
    "        elif 'send a mail' in query:\n",
    "            try:\n",
    "                speak(\"What should i Say\")\n",
    "                content=takeCommand()\n",
    "                speak(\"Whom to send the mail\")\n",
    "                to=input()\n",
    "                sendEmail(to, content)\n",
    "                speak(\"Email has been sent\")\n",
    "            except exception as e:\n",
    "                print(e)\n",
    "                speak(\"I am noot able to snet the email\")\n",
    "        elif 'how are you' in query :\n",
    "            speak(\"I am fine\")\n",
    "            speak(\"How are you,sir\")\n",
    "        elif 'fine' or 'good' in query:\n",
    "            speak(\"Good to know that your are fine\")\n",
    "        elif 'i love you' in query:\n",
    "            speak(\"BE in your limits, I have a Boyfriend\")\n",
    "        elif \"change my name\" in query:\n",
    "            query=query.replace(\"change my name to \",\"\")\n",
    "            assname=query\n",
    "        elif \"change name\" in query:\n",
    "            speak(\"What wouldd you like to call me sir\")\n",
    "            assname-takeCommand();\n",
    "            speak(\"Thanks  for  naming me\")\n",
    "        elif \"what's your name\"in query or \"what is your name\" in query:\n",
    "            speak(\"My friends call me \")\n",
    "            speak(assname)\n",
    "            print(\"My friends call me as\", assname)\n",
    "        elif 'exit' in query:\n",
    "            speak(\"Thank you for giving your time\")\n",
    "            exit()\n",
    "        elif \"who made you\" in query or\"who created you\" in query:\n",
    "            speak(\"I have been created by Ansh.\")\n",
    "        elif 'joke' in query:\n",
    "            speak(pyjokes.get_joke())\n",
    "        elif 'calculate' in query:\n",
    "            #n this part of the code, you're setting up a connection to the Wolfram Alpha API. You need to provide an API ID (app_id) which allows you to access Wolfram Alpha's computational knowledge engine. Then, you create a client object using this ID.\n",
    "            app_id= \"wolframaplha api id\"\n",
    "            client =wolframalpha.Client(app_id)\n",
    "            #Here, the code is parsing the user's query. It looks for the word \"calculate\" in the query and determines its index position. Then, it extracts the part of the query after the word \"calculate\" and stores it in the variable 'query'.\n",
    "            indx=query.lower().split().index('calculate')\n",
    "            query=query.split()[index+1:]\n",
    "            #This section sends the modified query to the Wolfram Alpha API using the client you created earlier. It retrieves the results from the API and extracts the text of the first result. This text likely contains the calculated answer.\n",
    "            res =client.query(' '.join(query))\n",
    "            answer=next(res.results).text\n",
    "            print(\"the answer is \"+answer)\n",
    "            speak(\"The answer is\"+ answer)\n",
    "        elif 'search' in query or 'play ' in query:\n",
    "            #In this part of the code, the variable 'query' is modified. The code looks for the words \"search\" and \"play\" within the query and removes them. Essentially, it's stripping away these specific commands from the user's input.\n",
    "            query=query.replace(\"search\",\"\")\n",
    "            query=query.replace(\"play\",\"\")\n",
    "            #After modifying the query, the code opens a web browser and navigates to the URL specified by the 'query' variable. So, whatever remains in the 'query' variable after removing \"search\" and \"play\" is treated as a URL, and the web browser opens that URL.\n",
    "            webbrowser.open(query)\n",
    "        elif 'who am i' in query:\n",
    "            speak(\"You are an idiot asking such question\")\n",
    "        elif 'why you came to world' in query:\n",
    "            speak(\"Thanks to Ansh, Further process is sceret \")\n",
    "        elif 'power point presentation' in query:\n",
    "            speak('opening power point presentation')\n",
    "            power=r\"C:\\Users\\anshk\\Downloads\\Recomendation system.pptx\"\n",
    "            os.startfile(power)\n",
    "        elif 'islove' in query:\n",
    "            speak('It is the 7th sense which destorys all other senses')\n",
    "        elif 'who are you' in query:\n",
    "            speak('Why do you want to know this')\n",
    "        elif 'reason for you' in query:\n",
    "            speak('to replace you !!')\n",
    "        elif 'change background' in query:\n",
    "            ctypes.windll.user32.SystemParametersInfoW(20,0,r\"C:\\Users\\anshk\\Downloads\\pexels-arshad-sutar-1749303.png\",0)\n",
    "            speak(\"Background changed Sucessfully\")\n",
    "        elif 'news' in query:\n",
    "            try:\n",
    "                jsonObj = urlopen('''https://newsapi.org / v1 / articles?source = the-times-of-india&sortBy = top&apiKey =\\\\times of India Api key\\\\''')# To be Continued \n",
    "                data=json.load(jsonObj)\n",
    "                i=1\n",
    "                speak('here are some top news from the times of india')\n",
    "                print(\"=======TIMES OF INIDA=========\")\n",
    "                for item in data['articles']:\n",
    "                    print(str(i) +'. '+item['articles'] +'\\n')\n",
    "                    print(item['description']+'\\n')\n",
    "                    speak(str(i) +'. '+item['title']+'\\n')\n",
    "            except Exception as  e:\n",
    "                print(str(e))\n",
    "        elif 'lock windown'in query or 'lock screen' in query:\n",
    "            speak('locking the screen')\n",
    "            ctypes.windll.user32.LockWorkStation()\n",
    "        elif 'shutdown system' in query:\n",
    "            speak(\"Hold on a sec! Your system in on the way to shut down\")\n",
    "            subprocess.call('shutdown/p/f')\n",
    "        elif \"do not listen\" in query or \"stop listening\" in query:\n",
    "            speak(\"for how much time you want  to stop jarvis from listening commands\")\n",
    "            a= int(takeCommand())\n",
    "            time.sleep(a)\n",
    "            print(a)\n",
    "        elif \"camera \" in query or \"take photo\" in query:\n",
    "            ec.capture(0,\"jarvis Camera\", \"img.jpg\")\n",
    "        elif \"restart\" in query:\n",
    "            subprocess.call([\"shutdown\",\"/r\"])\n",
    "        elif \"hibernate\" in query or \"sleep\" in query:\n",
    "            subprocess.call(\"shutdown /h\")\n",
    "        elif \"write a note \" in query:\n",
    "            speak(\"What should i write ,Sir\")\n",
    "            note=takeCommand()\n",
    "            file=open('jarvis.txt',w)\n",
    "            speak(\"Sir , should include date and time \")\n",
    "            snfm= takeCommand()\n",
    "            if 'yes' in snfm or 'sure' in snfm:\n",
    "                strTime=datetime.datetime.now().strftime(\"%H :% M:% S\")\n",
    "                file.write(strTime)\n",
    "                file.write(\":-\")\n",
    "                file.write(note)\n",
    "            else :\n",
    "                file.write(note)\n",
    "        elif 'show note' in query or 'display note' in query:\n",
    "            speak(\"Showing notes\")\n",
    "            file= open(\"jarvis.txt\",\"r\")\n",
    "            print(file.read())\n",
    "            print(file.read(6))\n",
    "        elif \"update assistant\" in query:\n",
    "            speak(\"After Downloading file please replace  file eith the download one\")\n",
    "            url='# url after uploadinf fiile'\n",
    "            r=requests.get(url,stream=True)\n",
    "            with open(\"Voice.py\",\"wb\") as Pypdf:\n",
    "                total_length=int(r.headers.get('content-length'))\n",
    "                for ch in progress.bar(r.iter_content(chunk_size=2391975),expected_size=(total_length/1024)+1):\n",
    "                    if ch:\n",
    "                        pypdf.write(ch)\n",
    "        elif \"jarvis\" in query:\n",
    "            WishMe()\n",
    "            speak(\"Jarvis 1 point 0 in your service\")\n",
    "            speak(assname)\n",
    "        elif \"weather\" in query:\n",
    "            api_key=\"Api Key\"\n",
    "            base_url=\"http://api.openweathermap.org / data / 2.5 / weather?\"\n",
    "            speak(\"City name\")\n",
    "            print (\"City name :\")\n",
    "            city_name =takecommand()\n",
    "            complete_url=base_url+\"appid=\"+api_key+\"&q=\"+city_name\n",
    "            response =requesrs.get(complete_url)\n",
    "            x=response.json();\n",
    "            if x[\"code\"] != \"404\":\n",
    "                y=x[\"main\"]\n",
    "                current_temperature=y[\"temp\"]\n",
    "                current_presuure=y[\"presure\"]\n",
    "                current_humidity=y[\"humidity\"]\n",
    "                z=x[\"weather\"]\n",
    "                weather_description=z[0][\"description\"]\n",
    "                print(\"Temperature(in kelvin unit) =\"+str(current_temperature)+\"\\n atomspheric pressure (in hPA unit) =\"+ str(current_pressure)+\"\\n huidity(in percentage) =\"+ str(current_humidity)+\"\\n description = \"+ str(weather_description))\n",
    "            else :\n",
    "                speak(\"city not found\")\n",
    "        elif \"send message \" in query:\n",
    "            account_sid=\"Account Sid Key\"\n",
    "            auth_token =\"Auth Token\"\n",
    "            clinet=Client(account_sid,auth_token)\n",
    "            messege=client.messages \\\n",
    "            .create(body=takeCommand(),from_=\"Sender No\",to=\"Receiver No\")\n",
    "            print(message.sid)\n",
    "        elif\"wikipedia\" in query:\n",
    "            webbrowser.open(\"wikipedia.com\")\n",
    "        elif\"good morining\" in query:\n",
    "            speak(\" A warm\"+query)\n",
    "            speak(\"How are you master\")\n",
    "            speak(assname)\n",
    "        elif \"will you be my gf\" in query or \"will you be my bf\" in query:   \n",
    "            speak(\"I'm not sure about, may be you should give me some time\")   \n",
    "        elif \"how are you\" in query:\n",
    "            speak(\"I'm fine, glad you me that\")\n",
    "        elif \"i love you\" in query:\n",
    "            speak(\"It's hard to understand\")\n",
    "        elif \"what is\" in query or \"who is\" in query:\n",
    "            clinet=wolframalphaClient(\"API_ID\")\n",
    "            res=clinet.query(query)\n",
    "            try:\n",
    "                print(next(res.results).text)\n",
    "                speak(next(res.results).text)\n",
    "            except StopIteration:\n",
    "                print(\"No Result\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
